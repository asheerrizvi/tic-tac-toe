{"version":3,"sources":["board.js","monteCarlo.js","index.js"],"names":["TTTBoard","dim","board","this","Array","fill","rep","count","i","index","emptySquares","push","player","lines","length","a","b","c","getEmptySquares","has","cloneDeep","switchPlayer","mcTrial","randomSquare","Math","floor","random","filter","square","move","checkWin","mcUpdateScores","scores","finalState","getDim","mcMove","trials","clonedBoard","clone","maximumScore","bestMoves","getBestMove","Square","props","className","onClick","value","Board","squares","renderSquare","React","Component","Game","initialState","history","stepNumber","xIsNext","xIsUser","state","setState","concat","machinePlayer","tttBoard","slice","calculateWinner","getMachineMove","updateHistory","step","event","target","preventDefault","current","winner","status","moves","map","desc","key","jumpTo","onSubmit","newGame","style","fontWeight","user","onChange","changeUser","type","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.280df069.chunk.js","sourcesContent":["/*\r\n  Provided Code for Tic-Tac-Toe\r\n*/\r\n\r\nimport has from 'lodash-es';\r\n\r\nexport class TTTBoard {\r\n  // Class to represent a Tic-Tac-Toe Board.\r\n  constructor(dim, board = null) {\r\n    /*\r\n      Initialize the TTTBoard object with the given dimension.\r\n    */\r\n    this.dim = dim;\r\n    this.board = board !== null ? board : Array(this.dim ** 2).fill(null);\r\n  }\r\n\r\n  toString() {\r\n    let rep = '';\r\n    let count = 0;\r\n    for (let i = 0; i < this.dim ** 2; i++) {\r\n      rep += this.board[i] ? this.board[i] : ' ';\r\n      if (count === 2) {\r\n        count = 0;\r\n        rep += '\\n';\r\n        if (i !== this.dim ** 2 - 1) rep += '---------';\r\n        rep += '\\n';\r\n      } else {\r\n        rep += ' | ';\r\n        count++;\r\n      }\r\n    }\r\n    return rep;\r\n  }\r\n\r\n  getDim() {\r\n    // Return the dimension of the board.\r\n    return this.dim;\r\n  }\r\n\r\n  getBoard() {\r\n    // Return the current board.\r\n    return [...this.board];\r\n  }\r\n\r\n  square(index) {\r\n    /*\r\n      Returns one of the three constants EMPTY, PLAYERX or PLAYERO\r\n      that correspond to the contents of the board at position (row, col).\r\n    */\r\n    return this.board[index];\r\n  }\r\n\r\n  getEmptySquares() {\r\n    // Return a list of (row, col) tuples for all empty squares\r\n    const emptySquares = [];\r\n    for (let i = 0; i < this.dim ** 2; i++) {\r\n      if (this.board[i] === null) {\r\n        emptySquares.push(i);\r\n      }\r\n    }\r\n    return emptySquares;\r\n  }\r\n\r\n  move(index, player) {\r\n    /*\r\n      Place player on the board at position (row, col).\r\n      player should be either the constant PLAYERX or PLAYERO.\r\n      Does nothing if board square is not empty.\r\n    */\r\n    if (this.board[index] === null) this.board[index] = player;\r\n  }\r\n\r\n  checkWin() {\r\n    /*\r\n      Returns a constant associated with the state of the game\r\n      If PLAYERX wins, returns PLAYERX.\r\n      If PLAYERO wins, returns PLAYERO.\r\n      If game is drawn, returns DRAW.\r\n      If game is in progress, returns None.\r\n    */\r\n    const board = this.board;\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n        return board[a];\r\n      }\r\n    }\r\n\r\n    // Game is either a draw or still in progress.\r\n    return this.getEmptySquares().length === 0 ? 'Draw' : null;\r\n  }\r\n\r\n  clone() {\r\n    return new TTTBoard(this.dim, has.cloneDeep(this.board));\r\n  }\r\n}\r\n\r\n/*\r\n  Convenience function to switch players.\r\n  Returns other player.\r\n*/\r\nexport const switchPlayer = (player) => (player === 'X' ? 'O' : 'X');\r\n\r\n// Function to play a game with two MC players.\r\nexport const playGame = (mcMoveFunction, ntrials) => {\r\n  // Setup game\r\n  const board = new TTTBoard(3);\r\n  let currentPlayer = 'X';\r\n  let winner = null;\r\n\r\n  // Run a game\r\n  while (winner === null) {\r\n    // Move\r\n    const [index] = mcMoveFunction(board, currentPlayer, ntrials);\r\n    board.move(index, currentPlayer);\r\n\r\n    // Update state\r\n    winner = board.checkWin();\r\n    currentPlayer = switchPlayer(currentPlayer);\r\n\r\n    // Display board\r\n    // console.log(board);\r\n    // console.log(\"========================\");\r\n  }\r\n\r\n  // Print winner\r\n  // if (winner === playerX) console.log(\"X Wins!\");\r\n  // else if (winner === playerO) console.log(\"O Wins!\");\r\n  // else if (winner === draw) console.log(\"Tie!\");\r\n  // else console.log(\"Error: Unknown number!\");\r\n};\r\n","/*\r\n  Monte Carlo Tic-Tac-Toe Player\r\n*/\r\n\r\nimport { switchPlayer } from './board';\r\n\r\nconst scoreCurrent = 2;\r\nconst scoreOther = 1;\r\n\r\nconst mcTrial = (board, player) => {\r\n  // Plays a random game on a board starting with the given player.\r\n  let emptySquares = board.getEmptySquares();\r\n  while (board.checkWin() === null) {\r\n    const randomSquare =\r\n      emptySquares[Math.floor(Math.random() * emptySquares.length)];\r\n    emptySquares = emptySquares.filter((square) => square !== randomSquare);\r\n    board.move(randomSquare, player);\r\n    player = switchPlayer(player);\r\n  }\r\n};\r\n\r\nconst mcUpdateScores = (scores, board, player) => {\r\n  // Update the scores grid based on the board and player.\r\n  const finalState = board.checkWin();\r\n  if (finalState === 'Draw') {\r\n    for (let i = 0; i < board.getDim() ** 2; i++) {\r\n      scores[i] += 0;\r\n    }\r\n  } else {\r\n    for (let i = 0; i < board.getDim() ** 2; i++) {\r\n      if (board.square(i) === player && finalState === player) {\r\n        scores[i] += scoreCurrent;\r\n      } else if (\r\n        board.square(i) !== player &&\r\n        board.square(i) !== null &&\r\n        finalState === player\r\n      ) {\r\n        scores[i] -= scoreOther;\r\n      } else if (board.square(i) === player && finalState !== player) {\r\n        scores[i] -= scoreCurrent;\r\n      } else if (\r\n        board.square(i) !== player &&\r\n        board.square(i) !== null &&\r\n        finalState !== player\r\n      ) {\r\n        scores[i] += scoreOther;\r\n      } else if (board.square(i) === null) {\r\n        scores[i] += 0;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst getBestMove = (board, scores) => {\r\n  // Returns the best possible move based on the scores grid.\r\n  const emptySquares = board.getEmptySquares();\r\n  let maximumScore = -1000;\r\n  const bestMoves = [];\r\n  for (let square of emptySquares) {\r\n    if (scores[square] > maximumScore) {\r\n      maximumScore = scores[square];\r\n    }\r\n  }\r\n  for (let square of emptySquares) {\r\n    if (scores[square] === maximumScore) {\r\n      bestMoves.push(square);\r\n    }\r\n  }\r\n  return bestMoves[Math.floor(Math.random() * bestMoves.length)];\r\n};\r\n\r\nconst mcMove = (board, player, trials) => {\r\n  // Uses monti carlo simulation to run n number of trials using the above methods.\r\n  const scores = Array(9).fill(0);\r\n  for (let i = 0; i < trials; i++) {\r\n    let clonedBoard = board.clone();\r\n    mcTrial(clonedBoard, player);\r\n    mcUpdateScores(scores, clonedBoard, player);\r\n  }\r\n  return getBestMove(board, scores);\r\n};\r\n\r\nexport default mcMove;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport './styles/normalize.css';\r\nimport './styles/skeleton.css';\r\n\r\nimport { TTTBoard } from './board';\r\nimport mcMove from './monteCarlo';\r\n\r\nconst Square = (props) => {\r\n  return (\r\n    <button className='square' onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className='board-row'>\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className='board-row'>\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className='board-row'>\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialState = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n        },\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      xIsUser: true,\r\n    };\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  updateHistory(history, squares, xIsNext) {\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n        },\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: xIsNext,\r\n    });\r\n  }\r\n\r\n  getMachineMove(squares) {\r\n    const machinePlayer = this.state.xIsUser ? 'O' : 'X';\r\n    const tttBoard = new TTTBoard(3, squares);\r\n    const bestMove = mcMove(tttBoard, machinePlayer, 100);\r\n    squares[bestMove] = machinePlayer;\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsUser ? 'X' : 'O';\r\n    this.getMachineMove(squares);\r\n    this.updateHistory(history, squares, !!this.state.xIsNext);\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n    });\r\n  }\r\n\r\n  changeUser(event) {\r\n    const xIsUser = event.target.value === 'X' ? true : false;\r\n    this.setState({ xIsUser: xIsUser });\r\n    if (xIsUser === 'X') {\r\n      this.setState({ xIsNext: true });\r\n    } else {\r\n      this.setState({ xIsNext: false });\r\n    }\r\n  }\r\n\r\n  newGame(event) {\r\n    event.preventDefault();\r\n    this.setState((state) => ({\r\n      ...this.initialState,\r\n      xIsNext: state.xIsNext,\r\n      xIsUser: state.xIsUser,\r\n    }));\r\n    if (!this.state.xIsUser) {\r\n      const history = this.initialState.history.slice(\r\n        0,\r\n        this.state.stepNumber + 1\r\n      );\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n\r\n      this.getMachineMove(squares);\r\n      this.updateHistory(history, squares, false);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    let status = \"Click 'New Game' to play\";\r\n    if (winner) {\r\n      status =\r\n        winner === 'Draw'\r\n          ? 'Game Status: ' + winner\r\n          : 'Game Status: ' + winner + ' wins!';\r\n    }\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\r\n      return (\r\n        <li key={move} className='history-item'>\r\n          <button\r\n            className='history-button button-primary'\r\n            onClick={() => this.jumpTo(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className='game'>\r\n        <div className='player-select'>\r\n          <form onSubmit={(event) => this.newGame(event)}>\r\n            <label style={{ fontWeight: '400' }}>\r\n              Go as 'X' or 'O'?\r\n              <select\r\n                className='player-selector'\r\n                value={this.state.user}\r\n                onChange={(event) => this.changeUser(event)}\r\n              >\r\n                <option value='X'>X</option>\r\n                <option value='O'>O</option>\r\n              </select>\r\n            </label>\r\n            <input\r\n              className='game-button button-primary'\r\n              type='submit'\r\n              value='New Game'\r\n            />\r\n          </form>\r\n        </div>\r\n        <div className='game-board'>\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className='game-info'>\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n\r\nfunction calculateWinner(squares) {\r\n  const tttBoard = new TTTBoard(3, squares);\r\n  return tttBoard.checkWin();\r\n}\r\n"],"sourceRoot":""}